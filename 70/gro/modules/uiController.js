// modules/uiController.js - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
import { CoordinateSystem } from './coordinates.js';

export class UIController {
    constructor(app) {
        this.app = app;
        this.coordSystem = new CoordinateSystem();
        this.elements = {};
        this.debounceTimer = null;
        this.popupHistory = [];
    }
    
    init() {
        this.createElements();
        this.bindEvents();
    }
    
    createElements() {
        const searchControls = document.getElementById('searchControls');
        searchControls.innerHTML = this.createSearchControlsHTML();
        
        const conversionControls = document.getElementById('conversionControls');
        conversionControls.innerHTML = this.createConversionControlsHTML();
        
        this.elements = {
            searchInput: document.getElementById('searchInput'),
            outputList: document.getElementById('outputList'),
            messageState: document.getElementById('messageState'),
            nearbyPopup: document.getElementById('nearbyPopup'),
            nearbyList: document.getElementById('nearbyList'),
            nearbyPopupTitle: document.getElementById('nearbyPopupTitle'),
            manualCoordX: document.getElementById('manualCoordX'),
            manualCoordY: document.getElementById('manualCoordY'),
            manualResultX: document.getElementById('manualResultX'),
            manualResultY: document.getElementById('manualResultY')
        };
    }
    
    createSearchControlsHTML() {
        return `
            <div class="control-row">
                <span class="control-label">–¶–µ–ª–µ–≤–∞—è –°–ö:</span>
                <div class="coord-toggle">
                    <input id="toggleIzp" name="coordSystem" type="radio" value="izp" checked>
                    <label for="toggleIzp">–ò–ó–ü</label>
                    <input id="toggleMsk" name="coordSystem" type="radio" value="msk">
                    <label for="toggleMsk">–ú–°–ö</label>
                    <input id="toggleGfu" name="coordSystem" type="radio" value="gfu">
                    <label for="toggleGfu">–ì–§–£</label>
                </div>
            </div>
            <div class="control-row">
                <span class="control-label">–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ:</span>
                <div class="search-mode-toggle">
                    <input id="searchContains" name="searchMode" type="radio" value="contains" checked>
                    <label for="searchContains">–°–æ–¥–µ—Ä–∂–∏—Ç</label>
                    <input id="searchExact" name="searchMode" type="radio" value="exact">
                    <label for="searchExact">–¢–æ—á–Ω–æ</label>
                </div>
            </div>
            <div class="control-row">
                <span class="control-label">–ò–≥–Ω–æ—Ä. —Å–ø–µ—Ü—Å–∏–º–≤.:</span>
                <div class="ignore-chars-toggle">
                    <input id="ignoreOff" name="ignoreMode" type="radio" value="off" checked>
                    <label for="ignoreOff">–í—ã–∫–ª</label>
                    <input id="ignoreOn" name="ignoreMode" type="radio" value="on">
                    <label for="ignoreOn">–í–∫–ª</label>
                </div>
            </div>
            <div class="control-row search-row">
                <input id="searchInput" type="text" placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..." class="search-input">
                <button id="geolocateButton" class="b geolocate-button" title="–ü–æ–∏—Å–∫ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏">üìç</button>
            </div>
        `;
    }
    
    createConversionControlsHTML() {
        return `
            <div class="control-row">
                <span class="control-label">–ò—Å—Ö–æ–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</span>
                <div class="coord-toggle">
                    <input id="manualSourceIzp" name="manualSourceSystem" type="radio" value="izp" checked>
                    <label for="manualSourceIzp">–ò–ó–ü</label>
                    <input id="manualSourceMsk" name="manualSourceSystem" type="radio" value="msk">
                    <label for="manualSourceMsk">–ú–°–ö</label>
                    <input id="manualSourceGfu" name="manualSourceSystem" type="radio" value="gfu">
                    <label for="manualSourceGfu">–ì–§–£</label>
                </div>
            </div>
            <div class="control-row">
                <label for="manualCoordX" class="control-label">X (–°–µ–≤–µ—Ä):</label>
                <input id="manualCoordX" type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ X" class="manual-coord-input" inputmode="decimal">
            </div>
            <div class="control-row">
                <label for="manualCoordY" class="control-label">Y (–í–æ—Å—Ç–æ–∫):</label>
                <input id="manualCoordY" type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ Y" class="manual-coord-input" inputmode="decimal">
            </div>
            <div class="control-row">
                <span class="control-label">–¶–µ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:</span>
                <div class="coord-toggle">
                    <input id="manualTargetIzp" name="manualTargetSystem" type="radio" value="izp">
                    <label for="manualTargetIzp">–ò–ó–ü</label>
                    <input id="manualTargetMsk" name="manualTargetSystem" type="radio" value="msk" checked>
                    <label for="manualTargetMsk">–ú–°–ö</label>
                    <input id="manualTargetGfu" name="manualTargetSystem" type="radio" value="gfu">
                    <label for="manualTargetGfu">–ì–§–£</label>
                </div>
            </div>
            <div class="control-row">
                <span class="control-label">–†–µ–∑—É–ª—å—Ç–∞—Ç:</span>
                <div class="conversion-result">
                    X: <span id="manualResultX">---</span>
                    Y: <span id="manualResultY">---</span>
                </div>
            </div>
        `;
    }
    
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    
    showNearbyLocationPopup(result, userCoords) {
        const popupContent = document.createElement('div');
        popupContent.className = 'popup-content';
        
        const closeBtn = document.createElement('button');
        closeBtn.className = 'popup-close-btn';
        closeBtn.innerHTML = '√ó';
        closeBtn.title = '–ó–∞–∫—Ä—ã—Ç—å';
        popupContent.appendChild(closeBtn);
        
        const header = document.createElement('div');
        header.className = 'popup-header';
        
        const title = document.createElement('h3');
        title.className = 'popup-title';
        title.textContent = '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è'; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å "–ü–æ–∏—Å–∫ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"
        header.appendChild(title);
        
        const coordsDiv = document.createElement('div');
        coordsDiv.className = 'popup-coordinates';
        coordsDiv.innerHTML = `
            –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (${this.app.state.currentCoordMode.toUpperCase()}):<br>
            <strong>X:</strong> ${this.formatCoordinate(result.userCoords.x)}<br>
            <strong>Y:</strong> ${this.formatCoordinate(result.userCoords.y)}
        `;
        header.appendChild(coordsDiv);
        
        popupContent.appendChild(header);
        
        const nearbySection = document.createElement('div');
        nearbySection.className = 'nearby-section';
        
        const nearbyTitle = document.createElement('h4');
        nearbyTitle.className = 'nearby-title';
        nearbyTitle.textContent = '–ë–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ (–¥–æ 300–º):';
        nearbySection.appendChild(nearbyTitle);
        
        const nearbyList = document.createElement('div');
        nearbyList.className = 'nearby-list';
        
        if (result.points.length === 0) {
            const noResults = document.createElement('div');
            noResults.className = 'no-results';
            noResults.textContent = '–ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç —Ç–æ—á–µ–∫';
            nearbyList.appendChild(noResults);
        } else {
            result.points.forEach(item => {
                const element = this.createRecordElement(item.record, true, item.distance);
                
                element.addEventListener('click', (e) => {
                    if (e.target.classList.contains('map-link')) {
                        return;
                    }
                    this.showPointDetails(item.record);
                });
                
                nearbyList.appendChild(element);
            });
        }
        
        nearbySection.appendChild(nearbyList);
        popupContent.appendChild(nearbySection);
        
        this.elements.nearbyPopup.innerHTML = '';
        this.elements.nearbyPopup.appendChild(popupContent);
        this.elements.nearbyPopup.style.display = 'flex';
        
        this.popupHistory = [];
    }
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
}
